//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/TouchControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TouchControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TouchControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchControls"",
    ""maps"": [
        {
            ""name"": ""SwipeInput"",
            ""id"": ""807f5a18-9b5b-46d2-bb36-f2660d4d95b2"",
            ""actions"": [
                {
                    ""name"": ""PrimaryContact"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3c83a944-306e-4699-b5e7-fcfff53b3587"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e00b965b-84fe-4ff9-9c4c-3f4f2ff9069a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwipeUp"",
                    ""type"": ""Value"",
                    ""id"": ""10516914-8f59-4886-b14e-53d5f9b53734"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bec843c9-13f3-4fa2-937a-6e0f10b07b8c"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52bf7503-95fd-4f70-929e-d5c4ba74ae9c"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""43be02de-57a7-46a1-8ad2-cc2f48b559ff"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwipeUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""GameOver"",
            ""id"": ""2568b9d7-4f2c-4d2c-9dd8-3cf0acc40d20"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""84ae6d1a-825e-4b82-b2d5-05651ac13432"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8c1ee0f0-c560-47c3-acfa-f7c4718febcc"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // SwipeInput
        m_SwipeInput = asset.FindActionMap("SwipeInput", throwIfNotFound: true);
        m_SwipeInput_PrimaryContact = m_SwipeInput.FindAction("PrimaryContact", throwIfNotFound: true);
        m_SwipeInput_PrimaryPosition = m_SwipeInput.FindAction("PrimaryPosition", throwIfNotFound: true);
        m_SwipeInput_SwipeUp = m_SwipeInput.FindAction("SwipeUp", throwIfNotFound: true);
        // GameOver
        m_GameOver = asset.FindActionMap("GameOver", throwIfNotFound: true);
        m_GameOver_Newaction = m_GameOver.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SwipeInput
    private readonly InputActionMap m_SwipeInput;
    private ISwipeInputActions m_SwipeInputActionsCallbackInterface;
    private readonly InputAction m_SwipeInput_PrimaryContact;
    private readonly InputAction m_SwipeInput_PrimaryPosition;
    private readonly InputAction m_SwipeInput_SwipeUp;
    public struct SwipeInputActions
    {
        private @TouchControls m_Wrapper;
        public SwipeInputActions(@TouchControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrimaryContact => m_Wrapper.m_SwipeInput_PrimaryContact;
        public InputAction @PrimaryPosition => m_Wrapper.m_SwipeInput_PrimaryPosition;
        public InputAction @SwipeUp => m_Wrapper.m_SwipeInput_SwipeUp;
        public InputActionMap Get() { return m_Wrapper.m_SwipeInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SwipeInputActions set) { return set.Get(); }
        public void SetCallbacks(ISwipeInputActions instance)
        {
            if (m_Wrapper.m_SwipeInputActionsCallbackInterface != null)
            {
                @PrimaryContact.started -= m_Wrapper.m_SwipeInputActionsCallbackInterface.OnPrimaryContact;
                @PrimaryContact.performed -= m_Wrapper.m_SwipeInputActionsCallbackInterface.OnPrimaryContact;
                @PrimaryContact.canceled -= m_Wrapper.m_SwipeInputActionsCallbackInterface.OnPrimaryContact;
                @PrimaryPosition.started -= m_Wrapper.m_SwipeInputActionsCallbackInterface.OnPrimaryPosition;
                @PrimaryPosition.performed -= m_Wrapper.m_SwipeInputActionsCallbackInterface.OnPrimaryPosition;
                @PrimaryPosition.canceled -= m_Wrapper.m_SwipeInputActionsCallbackInterface.OnPrimaryPosition;
                @SwipeUp.started -= m_Wrapper.m_SwipeInputActionsCallbackInterface.OnSwipeUp;
                @SwipeUp.performed -= m_Wrapper.m_SwipeInputActionsCallbackInterface.OnSwipeUp;
                @SwipeUp.canceled -= m_Wrapper.m_SwipeInputActionsCallbackInterface.OnSwipeUp;
            }
            m_Wrapper.m_SwipeInputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PrimaryContact.started += instance.OnPrimaryContact;
                @PrimaryContact.performed += instance.OnPrimaryContact;
                @PrimaryContact.canceled += instance.OnPrimaryContact;
                @PrimaryPosition.started += instance.OnPrimaryPosition;
                @PrimaryPosition.performed += instance.OnPrimaryPosition;
                @PrimaryPosition.canceled += instance.OnPrimaryPosition;
                @SwipeUp.started += instance.OnSwipeUp;
                @SwipeUp.performed += instance.OnSwipeUp;
                @SwipeUp.canceled += instance.OnSwipeUp;
            }
        }
    }
    public SwipeInputActions @SwipeInput => new SwipeInputActions(this);

    // GameOver
    private readonly InputActionMap m_GameOver;
    private IGameOverActions m_GameOverActionsCallbackInterface;
    private readonly InputAction m_GameOver_Newaction;
    public struct GameOverActions
    {
        private @TouchControls m_Wrapper;
        public GameOverActions(@TouchControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_GameOver_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_GameOver; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameOverActions set) { return set.Get(); }
        public void SetCallbacks(IGameOverActions instance)
        {
            if (m_Wrapper.m_GameOverActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_GameOverActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_GameOverActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_GameOverActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_GameOverActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public GameOverActions @GameOver => new GameOverActions(this);
    public interface ISwipeInputActions
    {
        void OnPrimaryContact(InputAction.CallbackContext context);
        void OnPrimaryPosition(InputAction.CallbackContext context);
        void OnSwipeUp(InputAction.CallbackContext context);
    }
    public interface IGameOverActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
